dat$rt[s] <- last
dat$choice[s] <- sign(tail(ddm,1))
}
dat$fixOnLeft[s] <- sum(rep(as.numeric(weightLeft==1),fixSamples)[1:last])
dat$fixOnRight[s] <- sum(rep(as.numeric(weightRight==1),fixSamples)[1:last])
}
dat$choice[dat$choice == -1] <- 0
dat$attentionAdv <- dat$fixOnLeft - dat$fixOnRight
dat$qqAdv <- NA
dat$qqAdv[dat$OV==0] <- as.numeric(cut(dat$attentionAdv[dat$OV==0], quantile(dat$attentionAdv[dat$OV==0], prob = seq(0, 1, length = 5)) , include.lowest = TRUE))
dat$qqAdv[dat$OV==1] <- as.numeric(cut(dat$attentionAdv[dat$OV==1], quantile(dat$attentionAdv[dat$OV==1], prob = seq(0, 1, length = 5)) , include.lowest = TRUE))
dat$attendedChosen <-0
dat$attendedChosen[dat$choice ==  1 & dat$attentionAdv > 0 ] <- 1
dat$attendedChosen[dat$choice == -1 & dat$attentionAdv < 0 ] <- 1
aggDat <- aggregate(dat$attendedChosen, by=list(dat$group, dat$OV, dat$qqAdv, dat$subjectID), mean )
colnames(aggDat) <- c('Group', 'OV', 'qqAdv', 'ID', 'Choice')
aggDat2 <- aggregate(aggDat$Choice, by=list(aggDat$group, aggDat$OV, aggDat$qqAdv), mean )
colnames(aggDat) <- c('Group', 'OV', 'ID', 'qqAdv', 'Choice')
par(mfrow = c(2,2))
boxplot(Choice~qqAdv, data=aggDat[aggDat$OV==0 & aggDat$Group =='Vertex',])
boxplot(Choice~qqAdv, data=aggDat[aggDat$OV==1 & aggDat$Group =='Vertex',])
boxplot(Choice~qqAdv, data=aggDat[aggDat$OV==0 & aggDat$Group =='TMS',])
boxplot(Choice~qqAdv, data=aggDat[aggDat$OV==1 & aggDat$Group =='TMS',])
# par(mfrow = c(2,1))
# boxplot(Choice~qqAdv* Group, data=aggDat[aggDat$OV==0,])
# boxplot(Choice~qqAdv* Group, data=aggDat[aggDat$OV==1,])
par(mfrow = c(2,1))
boxplot(Choice~Group * qqAdv, data=aggDat[aggDat$OV==0,])
boxplot(Choice~Group * qqAdv, data=aggDat[aggDat$OV==1,])
par(mfrow = c(2,2))
boxplot(Choice~qqAdv, data=aggDat[aggDat$OV==0 & aggDat$Group =='Vertex',])
boxplot(Choice~qqAdv, data=aggDat[aggDat$OV==1 & aggDat$Group =='Vertex',])
boxplot(Choice~qqAdv, data=aggDat[aggDat$OV==0 & aggDat$Group =='TMS',])
boxplot(Choice~qqAdv, data=aggDat[aggDat$OV==1 & aggDat$Group =='TMS',])
par(mfrow = c(2,1))
boxplot(Choice~Group * qqAdv, data=aggDat[aggDat$OV==0,])
boxplot(Choice~Group * qqAdv, data=aggDat[aggDat$OV==1,])
par(mfrow = c(2,1))
boxplot(Choice~qqAdv* Group, data=aggDat[aggDat$OV==0,])
boxplot(Choice~qqAdv* Group, data=aggDat[aggDat$OV==1,])
dat$qqAdv
aggDat <- aggregate(dat$attendedChosen, by=list(dat$group, dat$OV, dat$qqAdv, dat$subjectID), mean )
aggDat
colnames(aggDat) <- c('Group', 'OV', 'qqAdv', 'ID', 'Choice')
par(mfrow = c(2,1))
boxplot(Choice~qqAdv* Group, data=aggDat[aggDat$OV==0,])
boxplot(Choice~qqAdv* Group, data=aggDat[aggDat$OV==1,])
par(mfrow = c(2,1))
boxplot(Choice~Group * qqAdv, data=aggDat[aggDat$OV==0,])
boxplot(Choice~Group * qqAdv, data=aggDat[aggDat$OV==1,])
### Power analysis based on simulations
rm(list=ls())
# Task Parameters ---------------------------------------------------------
nSubs <- 12 # subjects per group
nTrials <- 15 # number of trial repetitions per Overall Value (Left Value + right Value)
group <- c("Vertex", "TMS")
N <- nSubs*length(group)
leftValue <- c(0,1,2,8,9,10)
leftValue <- rep(leftValue, each= nTrials)
rightValue <- leftValue
# Sample DDM values from gaussian distribution  --------
#### Maybe using a poisson distribution to sample only positive values  will be better
drift <- rnorm(n = N, mean = 0.0002, sd = 0.00001)
drift[drift <=0 ] <- 0.00005
sigma <- rnorm(n = N, mean = 0.02, sd = 0.001)
sigma[sigma <= 0] <- 0.005
thetaEffect <- 0.2
theta <- rnorm(n = N, mean = 0.4, sd = 0.1)
group <- rep(group, each=nSubs)
theta[group=='TMS'] <- theta[group=='TMS'] + thetaEffect
theta[theta < 0] <- 0.05
theta[theta > 1] <- 0.95
subjectID <- 1:N
par(mfrow = c(2, 3))
hist(drift[group=='Vertex'], xlim = c(0,0.00025), ylim = c(0,nSubs))
hist(sigma[group=='Vertex'], xlim = c(0,0.03), ylim = c(0,nSubs))
hist(theta[group=='Vertex'], xlim = c(0,1), ylim = c(0,nSubs))
hist(drift[group=='TMS'], xlim = c(0,0.00025), ylim = c(0,nSubs))
hist(sigma[group=='TMS'], xlim = c(0,0.03), ylim = c(0,nSubs))
hist(theta[group=='TMS'], xlim = c(0,1), ylim = c(0,nSubs))
# Build dat frame for choice simulations ----------------------------------
dat <- data.frame(subjectID, group, drift, sigma, theta)
dat <- dat[rep(seq_len(nrow(dat)), each = length(leftValue)), ]
dat$leftValue <- rep(leftValue, N)
dat$rightValue <- rep(rightValue, N)
dat$OV <- 0
dat$OV[dat$leftValue+dat$rightValue >= 16] <- 1
dat$choice <- NA
dat$rt <- NA
dat$group <- factor(dat$group,levels =  c("Vertex", "TMS"))
# Simulate choices --------------------------------------------------------
leftFix <- 10
maxFix <- leftFix * 2
for (s in 1: nrow(dat)) {
firstLeft <- runif(1,0,1)
#### probably it is better to replace this with fixations from empirical data (Krajbich. Nat Neuro)
fixSamples <- round(exp(rnorm(n = maxFix, mean = 7.5, sd = 2)))
if (fixSamples[1] > 300 ){ ### short first fiation
fixSamples[1] <- 300
}
weightLeft <- rep(c(1,dat$theta[s]), leftFix)
weightRight <- rev(weightLeft)
if (firstLeft >= 0.75) {
weightLeft <- rev(weightLeft)
weightRight <- rev(weightRight)
}
mainDrift <- dat$drift[s] * (rep(weightLeft,fixSamples) * rep(dat$leftValue[s],sum(fixSamples) ) +
rep(weightRight, fixSamples) * rep(dat$rightValue[s], sum(fixSamples)) )
noise <- rnorm(n = sum(fixSamples), mean = 0, sd = dat$sigma[s])
ddm <- cumsum(mainDrift + noise)
if ( any(abs(ddm) >= 1) ) {
last <- head(which(abs(ddm) >= 1) , 1)
dat$rt[s] <- last
dat$choice[s] <- sign(ddm[last])
} else {
last <-sum(fixSamples)
dat$rt[s] <- last
dat$choice[s] <- sign(tail(ddm,1))
}
dat$fixOnLeft[s] <- sum(rep(as.numeric(weightLeft==1),fixSamples)[1:last])
dat$fixOnRight[s] <- sum(rep(as.numeric(weightRight==1),fixSamples)[1:last])
}
dat$choice[dat$choice == -1] <- 0
dat$attentionAdv <- dat$fixOnLeft - dat$fixOnRight
dat$qqAdv <- NA
dat$qqAdv[dat$OV==0] <- as.numeric(cut(dat$attentionAdv[dat$OV==0], quantile(dat$attentionAdv[dat$OV==0], prob = seq(0, 1, length = 5)) , include.lowest = TRUE))
dat$qqAdv[dat$OV==1] <- as.numeric(cut(dat$attentionAdv[dat$OV==1], quantile(dat$attentionAdv[dat$OV==1], prob = seq(0, 1, length = 5)) , include.lowest = TRUE))
dat$attendedChosen <-0
dat$attendedChosen[dat$choice ==  1 & dat$attentionAdv > 0 ] <- 1
dat$attendedChosen[dat$choice == -1 & dat$attentionAdv < 0 ] <- 1
aggDat <- aggregate(dat$attendedChosen, by=list(dat$group, dat$OV, dat$qqAdv, dat$subjectID), mean )
colnames(aggDat) <- c('Group', 'OV', 'qqAdv', 'ID', 'Choice')
par(mfrow = c(2,1))
boxplot(Choice~Group * qqAdv, data=aggDat[aggDat$OV==0,])
boxplot(Choice~Group * qqAdv, data=aggDat[aggDat$OV==1,])
source('~/Desktop/power.r')
source('~/Desktop/power.r')
View(dat[dat$OV==1,])
source('~/Desktop/power.r')
aggDat
aggDat2 <- aggregate(aggDat$choice, by=list(aggDat$group, aggDat$OV, aggDat$qqAdv), mean )
aggDat2 <- aggregate(aggDat$choice, by=list(aggDat$Group, aggDat$OV, aggDat$qqAdv), mean )
aggDat2 <- aggregate(aggDat$Choice, by=list(aggDat$Group, aggDat$OV, aggDat$qqAdv), mean )
aggDat2
aggDat2 <- aggregate(aggDat$Choice, by=list(aggDat$Group, aggDat$OV, aggDat$qqAdv), mean )
colnames(aggDat2) <- c('Group', 'OV', 'qqAdv', 'Choice')
aggDat2
error <- aggregate(aggDat$Choice, by=list(aggDat$Group, aggDat$OV, aggDat$qqAdv), function(x) sd(x)/sqrt(length(x)) )
error
aggDat2 <- aggregate(aggDat$Choice, by=list(aggDat$Group, aggDat$OV, aggDat$qqAdv), mean )
error <- aggregate(aggDat$Choice, by=list(aggDat$Group, aggDat$OV, aggDat$qqAdv), function(x) sd(x)/sqrt(length(x)) )
head(aggDat)
head(error)
merge(aggDat, error, by =  c('Group.1','Group.3','Group.3') )
merge(aggDat, error, by = c('Group.1','Group.2','Group.3') )
merge(aggDat, error, by = c('Group.1') )
aggDat
merge(aggDat2, error, by = c('Group.1') )
merge(aggDat, error, by = c('Group.1','Group.2','Group.3') )
merge(aggDat2, error, by = c('Group.1','Group.2','Group.3') )
colnames(aggDat2) <- c('Group', 'OV', 'qqAdv', 'Choice', 'error')
aggDat <- aggregate(dat$choice, by=list(dat$group, dat$OV, dat$qqAdv, dat$subjectID), mean )
colnames(aggDat) <- c('Group', 'OV', 'qqAdv', 'ID', 'Choice')
error <- aggregate(aggDat$Choice, by=list(aggDat$Group, aggDat$OV, aggDat$qqAdv), function(x) sd(x)/sqrt(length(x)) )
aggDat2 <- aggregate(aggDat$Choice, by=list(aggDat$Group, aggDat$OV, aggDat$qqAdv), mean )
aggDat2 <- merge(aggDat2, error, by = c('Group.1','Group.2','Group.3') )
aggDat2
aggDat2
colnames(aggDat2) <- c('Group', 'OV', 'qqAdv', 'Choice', 'error')
aggDat2
plot(x=aggDat2$qqAdv, y=aggDat2$Choice, col=aggDat2$Group)
plot(x=aggDat2$qqAdv, y=aggDat2$Choice, col=aggDat2$Group, type='o')
plot(x=aggDat2$qqAdv, y=aggDat2$Choice, col=aggDat2$Group, type='b')
plot(x=aggDat2$qqAdv, y=aggDat2$Choice, col=aggDat2$Group, type='c')
plot(x=aggDat2$qqAdv, y=aggDat2$Choice, col=aggDat2$Group, type='l')
plot(x=aggDat2$qqAdv, y=aggDat2$Choice, col=aggDat2$Group)
graphics.off()
plot(x=aggDat2$qqAdv, y=aggDat2$Choice, col=aggDat2$Group)
plot(x=aggDat2$qqAdv[aggDat2$OV==0,], y=aggDat2$Choice[aggDat2$OV==0,], col=aggDat2$Group[aggDat2$OV==0,])
plot(x=aggDat2$qqAdv[aggDat2$OV==0], y=aggDat2$Choice[aggDat2$OV==0], col=aggDat2$Group[aggDat2$OV==0])
par(mfrow = c(2,1))
plot(x=aggDat2$qqAdv[aggDat2$OV==0], y=aggDat2$Choice[aggDat2$OV==0],
col=aggDat2$Group[aggDat2$OV==0], ylim=c(0,1))
plot(x=aggDat2$qqAdv[aggDat2$OV==1], y=aggDat2$Choice[aggDat2$OV==1],
col=aggDat2$Group[aggDat2$OV==1], ylim=c(0,1
))
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0], y=aggDat2$Choice[aggDat2$OV==0],
col=aggDat2$Group[aggDat2$OV==0], ylim=c(0,1))
plot(x=aggDat2$qqAdv[aggDat2$OV==1], y=aggDat2$Choice[aggDat2$OV==1],
col=aggDat2$Group[aggDat2$OV==1], ylim=c(0,1))
plot(x=aggDat2$qqAdv[aggDat2$OV==0], y=aggDat2$Choice[aggDat2$OV==0],
col=aggDat2$Group[aggDat2$OV==0], ylim=c(0,1), type ='b')
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0], y=aggDat2$Choice[aggDat2$OV==0],
col=aggDat2$Group[aggDat2$OV==0], ylim=c(0,1), type ='b')
plot(x=aggDat2$qqAdv[aggDat2$OV==1], y=aggDat2$Choice[aggDat2$OV==1],
col=aggDat2$Group[aggDat2$OV==1], ylim=c(0,1), type ='b')
source('~/Desktop/power.r')
source('~/Desktop/power.r')
source('~/Desktop/power.r')
plot(x=aggDat2$qqAdv[aggDat2$OV==0], y=aggDat2$Choice[aggDat2$OV==0],
col=aggDat2$Group[aggDat2$OV==0], ylim=c(0,1), type ='n')
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b')
lnes(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b')
lnes(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b')
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b')
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" )
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" )
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" )
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
legend("topleft", legend = c("Vertex", "TMS"), col = c("red", "gree"), lty = 1)
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" )
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" )
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
legend("topleft", legend = c("Vertex", "TMS"), col = c("red", "green"), lty = 1)
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" )
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'low OV')
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
legend("topleft", legend = c("Vertex", "TMS"), col = c("red", "green"), lty = 1)
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'low OV')
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
legend("topleft", legend = c("Vertex", "TMS"), col = c("red", "green"), lty = 1)
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'high OV')
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] + aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex']
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'High OV')
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
segments(aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] - aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] + aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex'])
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'High OV')
segments(aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] - aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] + aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex'])
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
segments(aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'] - aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'] + aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'TMS'])
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'Low OV')
segments(aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'] - aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'] + aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'Vertex'])
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
legend("topleft", legend = c("Vertex", "TMS"), col = c("red", "green"), lty = 1)
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'Low OV')
segments(aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'] - aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'] + aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'Vertex'])
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
lines(x=aggDat2$qqAdv[aggDat2$OV==0 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
segments(aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'] - aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'] + aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'TMS'])
legend("topleft", legend = c("Vertex", "TMS"), col = c("red", "green"), lty = 1)
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'High OV')
segments(aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] - aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] + aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex'])
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
segments(aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'] - aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'] + aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'TMS'])
par(mfrow = c(1,2))
plot(x=aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'Low OV')
segments(aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'] - aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'Vertex'] + aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'Vertex'])
lines(x=aggDat2$qqAdv[aggDat2$OV==0&  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
lines(x=aggDat2$qqAdv[aggDat2$OV==0 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
col='green', type ='b')
segments(aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'] - aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
aggDat2$qqAdv[aggDat2$OV==0 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==0 & aggDat2$Group == 'TMS'] + aggDat2$error[aggDat2$OV==0 & aggDat2$Group == 'TMS'])
legend("topleft", legend = c("Vertex", "TMS"), col = c("green", 'red'), lty = 1)
plot(x=aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
col='red', ylim=c(0,1), type ='b', xlab = "fix advantage", ylab = "P(choice left)" , main = 'High OV')
segments(aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] - aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'Vertex'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'Vertex'] + aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'Vertex'])
lines(x=aggDat2$qqAdv[aggDat2$OV==1 &  aggDat2$Group == 'TMS'], y=aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
col='green', type ='b')
segments(aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'] - aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$qqAdv[aggDat2$OV==1 & aggDat2$Group == 'TMS'],
aggDat2$Choice[aggDat2$OV==1 & aggDat2$Group == 'TMS'] + aggDat2$error[aggDat2$OV==1 & aggDat2$Group == 'TMS'])
head(dat)
library(simr)
simrOptions(progress=FALSE)
### full model
choiceModel <- glmer(choice ~ group * qqAdv * OV + (1 | subjectID), data=dat, family=binomial)
powerStimation <- powerSim(choiceModel, nsim=50, test = fcompare(attendedChosen~ group * attentionAdv * OV))
powerStimation
powerStimation <- powerSim(choiceModel, nsim=50, test = fcompare(choice~ group * attentionAdv * OV))
choiceModel
summary(choiceModel)
powerStimation
head(dat)
choiceModel <- glmer(choice ~ group * qqAdv * OV + (1 | subjectID), data=dat, family=binomial)
powerStimation <- powerSim(choiceModel, nsim=50, test = fcompare(choice ~ group * qqAdv * OV))
summary(choiceModel)
powerStimation
powerStimationExtended <- extend(choiceModel, along="subjectID", n=50)
powerStimationExtended
summary(powerStimationExtended)
powerCurve <- powerCurve(powerStimationExtended, test=fcompare(attendedChosen~ group * attentionAdv *  OV), along="subjectID")
powerCurve <- powerCurve(powerStimationExtended, test=fcompare(choice ~ group * qqAdv *  OV), along="subjectID")
fixef(choiceModel)
summary(choiceModel)
source('~/Desktop/power.r')
summary(choiceModel)
choiceModel <- glmer(choice ~ group * qqAdv * OV + (1 | subjectID), data=dat, family=binomial)
choiceModel
summary(choiceModel)
fixef(choiceModel)
fixef(choiceModel)[8]
fixef(choiceModel)[8] * 1.5
choiceModel <- glmer(choice ~ group * qqAdv * OV + (1 | subjectID), data=dat, family=binomial)
### modifiy the effect size of interaction TMS x qqAdv x OV
fixef(choiceModel)[8] <- fixef(choiceModel)[8] * 1.5 # increment effect size by 50 %
### power estimation for the effect
powerStimation <- powerSim(choiceModel, nsim=50, test = fcompare(choice ~ group * qqAdv * OV))
powerStimation
summary(powerStimation)
powerStimationExtended <- extend(choiceModel, along="subjectID", n=50)
powerStimationExtended
powerCurve <- powerCurve(powerStimationExtended, test=fcompare(choice ~ group * qqAdv *  OV), along="subjectID")
powerCurve
source('~/.active-rstudio-document')
s
-1^0
-1^1
source('~/.active-rstudio-document')
s
-1^1
-1^2
3^2
-1^4
-2^n
-1^4
-2^4
(-1)^4
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
graphics.off()
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
sin( pi* 2*pi/length(n))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
x <- list(c,4)
x
x <- list(1,4)
x
cat(x)
cat(x[1])
print(x[1])
print(x)
strsplit(x[[1]], " ")
x <- list("1 4")
x
strsplit(x[[1]], " ")
q<-strsplit(x[[1]], " ")
q[[1]]
q[[1]][1]
shiny::runApp('Projects/regresion_toy_app')
library(usethis)
install.packages(usethis)
install.packages("usethis")
library(usethis)
library('usethis')
install.packages("usethis",dependencies = TRUE)
library(usethis)
library('usethis')
updateR()
R
version
updateR()
if(!require(installr)) {
install.packages("installr");
require(installr)
}
library(devtools)
install.packages('devtools')
library(devtools)
RStudio.Version()
RStudio.Version()
plot(1,1)
install.packages("devtools")
library(devtools)
library(ggplot2)
library(devtools)
install.packages("devtools")
install.packages("devtools")
library(shiny)
library(survival)
library(surminer)
library(survminer)
install.packages("survminer")
library(survminer)
install.packages("car")
install.packages("survminer")
install.packages("car")
install.packages("survminer")
library(survminer)
install.packages("devtools")
library(devtools)
install.packages("gert")
remotes::install_github("r-lib/gert")
library(survival)
lung
dim(lung)
str(lung)
?lung
lung$status
hist(lung$wt.loss)
library(gert)
install.packages("devtools")
library(devtools)
setwd("Projects/gazeR/")
